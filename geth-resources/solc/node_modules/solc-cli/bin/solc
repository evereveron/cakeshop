#!/usr/bin/env node

var fs = require("fs");
var path = require("path");
var child_process = require("child_process");

function processArgs() {
  // Handle --version
  process.argv.forEach(function (arg) {
    if (arg.trim() === "--version") {
      var solc = require("solc");
      console.log("solc, the solidity compiler commandline interface (js wrapper for Node.js)");
      console.log("Version: " + solc.version());
      process.exit();
    }
  });

  if (process.argv.length < 4) {
    console.log("usage: solc -o <output dir>");
    process.exit(1);
  }

  // just run the thing
  var directory = process.argv.pop();
  processStdin(directory);
}

function processStdin(outputDir) {
  var buffer = "";

  process.stdin.setEncoding('utf8');
  process.stdin.on('data', function(chunk) {
    if (chunk !== null) {
      buffer += chunk;
    }
  });

  process.stdin.on('end', function() {
    compileSource(buffer.trim(), outputDir);
  });
}

function compileFile(filename, outputDir) {
  if (!fs.existsSync(filename)) {
    console.error("ERROR: file does not exist:", filename);
    process.exit(1);
  }

  var file = fs.readFileSync(filename, "utf8");
  compileSource(file, outputDir);
}

function compileSource(source, outputDir) {
  var solc = require("solc");
  var output = solc.compile(source, 1); // always optimize

  Object.keys(output.contracts).forEach(function(contractName) {
    var contract = output.contracts[contractName];
    //console.log(contract);

    var baseFilename = outputDir + path.sep + contractName;

    fs.writeFileSync(baseFilename + ".bin", contract.bytecode);
    fs.writeFileSync(baseFilename + ".abi", contract.interface);

    var junk = JSON.stringify({"methods" : {}});
    fs.writeFileSync(baseFilename + ".docdev", junk);
    fs.writeFileSync(baseFilename + ".docuser", junk);
  });
}

processArgs();
